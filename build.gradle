plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

checkstyle {
    toolVersion = '10.18.1'
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}


tasks.withType(Checkstyle).configureEach {
    // Prevent classpath issues (you’re not using custom checks)
    classpath = files()
    // Optional while you clean up:
    // ignoreFailures = true
    reports { html.required = true; xml.required = false }
}


repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.0'
    String javaFxVersion = '17.0.7'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
    
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

application {
    mainClass.set("jason.app.Jason")
}

shadowJar {
    archiveBaseName = "jason.jar"
    archiveClassifier = null
}

run{
    standardInput = System.in
}

// Put this anywhere in build.gradle (top level)
tasks.register('installGoogleCheckstyle') {
    doLast {
        // toolVersion is a String, not a Property — don't call .get()
        def ver = project.checkstyle.toolVersion
        if (!ver) throw new GradleException("checkstyle.toolVersion is not set")

        // Resolve the Checkstyle jar for that exact version
        def cfg = configurations.detachedConfiguration(
            dependencies.create("com.puppycrawl.tools:checkstyle:${ver}")
        )
        def jar = cfg.resolve().find { it.name ==~ /checkstyle-.*\.jar/ }
        if (!jar) throw new GradleException("Could not resolve Checkstyle ${ver}")

        // Extract google_checks.xml and save it as your project config
        copy {
            from zipTree(jar)
            include 'google_checks.xml'
            into "${rootDir}/config/checkstyle"
            rename { 'checkstyle.xml' } // final path: config/checkstyle/checkstyle.xml
        }
        println "Installed Google rules -> config/checkstyle/checkstyle.xml"
    }
}

